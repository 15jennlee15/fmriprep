import uuid

from nilearn import plotting
from nipype.interfaces import ants, fsl
from nipype.interfaces.base import File, traits

from niworkflows import report

class RegistrationInputSpecRPT(ants.registration.RegistrationInputSpec):
    generate_report = traits.Bool(
        desc="Set to true to enable report generation for node"
    )

class RegistrationOutputSpecRPT(ants.registration.RegistrationOutputSpec):
    html_report = File(desc="Filename of report generated by node")

class RegistrationRPT(report.ReportCapableInterface, ants.Registration):
    input_spec = RegistrationInputSpecRPT
    output_spec = RegistrationOutputSpecRPT

    def _generate_report(self):
        #  self.input_spec.fixed_image
        #  self.output_spec.warped_image
        with open(output_spec.html_report, 'w') as html_file:
            pass

class FASTInputSpecRPT(fsl.preprocess.FASTInputSpec):
    generate_report = traits.Bool(
        desc="Set to true to enable report generation for node"
    )

class FASTOutputSpecRPT(fsl.preprocess.FASTOutputSpec):
    html_report = File(desc="Filename of report generated by node")

class FASTRPT(report.ReportCapableInterface, fsl.FAST):
    input_spec = FASTInputSpecRPT
    output_spec = FASTOutputSpecRPT

    def _generate_report(self):
        raise NotImplementedError


class BETInputSpecRPT(fsl.preprocess.BETInputSpec):
    generate_report = traits.Bool(
        desc="Set to true to enable report generation for node"
    )

class BETOutputSpecRPT(fsl.preprocess.BETOutputSpec):
    html_report = File(desc="Filename of report generated by node")

class BETRPT(report.ReportCapableInterface, fsl.BET):
    input_spec = BETInputSpecRPT
    output_spec = BETOutputSpecRPT

    def _overlay_file_name(self):
        ''' returns an overlay, in this order of preference: mask_file, outline_file,
        out_file, and the name of the output'''
        outputs = self.aggregate_outputs().get()

        for output_name in ['mask_file', 'outline_file', 'out_file']:
            if output_name:
                return outputs[output_name], output_name
        return None, None

    def _pick_output_file(self):
        for _, file_name in self.aggregate_outputs().get().items():
            if file_name and file_name.find('.nii') != -1: # rough check for nifti format
                return file_name
        raise Warning('Could not find outputs for BET; cannot generate report. Inputs are {} and'
                      ' outputs are {}.'.format(self.inputs, self.aggregate_outputs()))

    def _generate_report(self):
        ''' generates a report showing three orthogonal slices of an arbitrary
        volume of in_file, with the resulting binary brain mask overlaid '''

        try:
            # most of the time just do simple semi-transparent overlay of brain mask over input
            image = plotting.plot_roi(self.aggregate_outputs().mask_file,
                                      bg_img=self.inputs.in_file, alpha=0.5)
            report.save_html(template='overlay_3d_report.tpl',
                             report_file_name=self.html_report,
                             unique_string='bet' + str(uuid.uuid4()),
                             base_image=report.as_svg(image),
                             title="BET: brain mask over anatomical input",
                             inputs=self.inputs,
                             outputs=self.aggregate_outputs())
            image.close()
        except: # in case of weird outputs
            overlay_file_name, overlay_label = self._overlay_file_name()
            if overlay_file_name:
                cut_coords = plotting.find_xyz_cut_coords(overlay_file_name)

                background_params = {'anat_img': self.inputs.in_file,
                                     'cut_coords': cut_coords,
                                     'cmap': 'gray'}
                base_image = plotting.plot_anat(**background_params)
                overlay_image = plotting.plot_anat(**background_params)
                overlay_image.add_contours(overlay_file_name, filled=True, colors='b', levels=[0.5],
                                           alpha=1)

                report.save_html(template='overlay_3d_report.tpl',
                                 report_file_name=self.html_report,
                                 unique_string='bet' + str(uuid.uuid4()),
                                 base_image=report.as_svg(base_image),
                                 overlay_image=report.as_svg(overlay_image),
                                 inputs=self.inputs,
                                 outputs=self.aggregate_outputs(),
                                 title="BET: " + overlay_label + " over the input (anatomical)")

                base_image.close()
                overlay_image.close()
            else: # just print an output (no overlay)
                file_name = self._pick_output_file()
                image = plotting.plot_img(file_name)

                report.save_html(template='overlay_3d_report.tpl',
                                 report_file_name=self.html_report,
                                 unique_string='bet' + str(uuid.uuid4()),
                                 base_image=report.as_svg(image),
                                 title="BET: " + file_name,
                                 inputs=self.inputs,
                                 outputs=self.aggregate_outputs())
                image.close()

    def _generate_error_report(self):
        pass

class FLIRTInputSpecRPT(fsl.preprocess.FLIRTInputSpec):
    generate_report = traits.Bool(
        desc="Set to true to enable report generation for node"
    )

class FLIRTOutputSpecRPT(fsl.preprocess.FLIRTOutputSpec):
    html_report = File(desc="Filename of report generated by node")

class FLIRTRPT(report.ReportCapableInterface, fsl.FLIRT):
    input_spec = FLIRTInputSpecRPT
    output_spec = FLIRTOutputSpecRPT

    def _generate_report(self):
        ref = self.inputs.reference
        ref_image_name = '{}.svg'.format(ref)
        out = self.inputs.out_file
        out_image_name = '{}.svg'.format(out)

        plotting.plot_img(ref, output_file=ref_image_name)
        plotting.plot_img(out, output_file=out_image_name)

        with open(ref_image_name, 'r') as file_obj:
            ref_image = file_obj.readlines()

        with open(out_image_name, 'r') as file_obj:
            out_image = file_obj.readlines()

        report.save_html(
            template='overlay_3d_report.tpl',
            report_file_name=self.html_report,
            unique_string='flirt' + str(uuid.uuid4()),
            base_image=ref_image,
            overlay_image=out_image,
            inputs=self.inputs,
            outputs=self.aggregate_outputs(),
            title="FLIRT: Overlay of registered image on top of reference file"
        )

from nipype.interfaces import ants, fsl
from nipype.interfaces.base import File, traits, BaseInterface


class ReportCapableInterface(object):
    # constants
    ERROR_REPORT = 'error'
    SUCCESS_REPORT = 'success'

    def run(self, **inputs):
        ''' delegates to base interface run method, then attempts to generate reports '''
        try:
            result = super(self, ReportCapableInterface).run()
            #  command line interfaces might not raise an exception, check return_code
            if result.runtime.return_code != None and result.runtime.return_code != 0:
                self._conditionally_generate_report(self.ERROR_REPORT)
            else:
                self._conditionally_generate_report(self.SUCCESS_REPORT)
        except:
            self._conditionally_generate_report(self.ERROR_REPORT)
            raise

    def _conditionally_generate_report(self, flag):
        ''' Do nothing if generate_report is not True.
        Otherwise delegate to a report generating method  '''
        # don't do anything unless the generate_report boolean is set to True
        if self.inputs.generate_report != None or not self.inputs.generate_report:
            return

        if flag == self.SUCCESS_REPORT:
            self._generate_report()
        elif flag == self.ERROR_REPORT:
            self._generate_error_report()
        else:
            raise ValueError("Cannot generate report with flag {}. "
                             "Use constants SUCCESS_REPORT and ERROR_REPORT."
                             .format(flag))

    @abstract
    def _generate_report(self):
        ''' Saves an html snippet '''
        raise NotImplementedError

    def _generate_error_report(self):
        ''' Saves an html snippet '''
        # as of now we think this will be the same for every interface
        raise NotImplementedError



class ANTSInputSpecRPT(ants.ANTSInputSpec):
    generate_report = traits.Bool(
        desc="Set to true to enable report generation for node"
    )

class ANTSOutputSpecRPT(ants.ANTSOutputSpec):
    html_report = File(desc="Filename of report generated by node")

class ANTSRPT(ReportCapableInterface, ants.ANTS):
    input_spec = ANTSInputSpecRPT
    output_spec = ANTSOutputSpecRPT

    def _generate_report(self):
        raise NotImplementedError

    def _run_interface(self, runtime):
        runtime = super(ANTSRPT, self)._run_interface(runtime)
        if self.inputs.generate_report:
            self._generate_report()


class FASTInputSpecRPT(fsl.FASTInputSpec):
    generate_report = traits.Bool(
        desc="Set to true to enable report generation for node"
    )

class FASTOutputSpecRPT(fsl.FASTOutputSpec):
    html_report = File(desc="Filename of report generated by node")

class FASTRPT(ReportCapableInterface, fsl.FAST):
    input_spec = FASTInputSpecRPT
    output_spec = FASTOutputSpecRPT

    def _generate_report(self):
        raise NotImplementedError


class BETInputSpecRPT(fsl.BETInputSpec):
    generate_report = traits.Bool(
        desc="Set to true to enable report generation for node"
    )

class BETOutputSpecRPT(fsl.BETOutputSpec):
    html_report = File(desc="Filename of report generated by node")

class BETRPT(ReportCapableInterface, fsl.BET):
    input_spec = BETInputSpecRPT
    output_spec = BETOutputSpecRPT

    def _generate_report(self):
        raise NotImplementedError


class FASTInputSpecRPT(fsl.FASTInputSpec):
    generate_report = traits.Bool(
        desc="Set to true to enable report generation for node"
    )

class FASTOutputSpecRPT(fsl.FASTOutputSpec):
    html_report = File(desc="Filename of report generated by node")

class FASTRPT(ReportCapableInterface, fsl.FAST):
    input_spec = FASTInputSpecRPT
    output_spec = FASTOutputSpecRPT

    def _generate_report(self):
        raise NotImplementedError


class FLIRTInputSpecRPT(fsl.FLIRTInputSpec):
    generate_report = traits.Bool(
        desc="Set to true to enable report generation for node"
    )

class FLIRTOutputSpecRPT(fsl.FLIRTOutputSpec):
    html_report = File(desc="Filename of report generated by node")

class FLIRTRPT(ReportCapableInterface, fsl.FLIRT):
    input_spec = FLIRTInputSpecRPT
    output_spec = FLIRTOutputSpecRPT

    def _generate_report(self):
        raise NotImplementedError


